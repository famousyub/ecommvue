import { defineComponent as i, h as r, toRaw as n } from "vue";
import { service as f, factories as l, Embed as b, Visual as p, Qna as u, Tile as v, Dashboard as g, Report as w } from "powerbi-client";
const H = "powerbi-client-vue-js", E = "1.1.0", R = "VueJS wrapper for powerbi-client library", C = [
  "dist"
], y = "./dist/powerbi-client-vue-js.es.js", B = "./dist/powerbi-client-vue-js.umd.js", S = "./dist/types/src/public-api.d.ts", $ = {
  dev: "vite",
  build: "vite build && vue-tsc --declaration --emitDeclarationOnly",
  preview: "vite preview",
  lint: "eslint ./src --ext .ts",
  test: "jest src",
  demo: "cd demo && npm run dev",
  "install:demo": "cd demo && npm install"
}, O = [
  "microsoft",
  "powerbi",
  "embedded",
  "vue-js"
], j = {
  type: "git",
  url: "https://github.com/microsoft/powerbi-client-vue-js"
}, P = "MIT", T = {
  "powerbi-client": "^2.22.4",
  "powerbi-report-authoring": "^1.1.3",
  vue: "^3.4.21"
}, I = {
  "@types/jest": "^28.1.3",
  "@typescript-eslint/eslint-plugin": "^5.33.0",
  "@typescript-eslint/parser": "^5.33.0",
  "@vitejs/plugin-vue": "^5.0.4",
  "@vue/test-utils": "^2.0.0",
  eslint: "^8.57.0",
  "eslint-plugin-vue": "^9.22.0",
  jest: "^26.6.3",
  "ts-jest": "^26.5.6",
  typescript: "^4.5.4",
  vite: "^5.1.5",
  "vue-jest": "^5.0.0-alpha.10",
  "vue-tsc": "^0.34.7"
}, k = {
  name: H,
  version: E,
  description: R,
  files: C,
  main: y,
  module: B,
  types: S,
  scripts: $,
  keywords: O,
  repository: j,
  license: P,
  dependencies: T,
  devDependencies: I
};
function M(t, e) {
  if (t.size !== e.size)
    return !1;
  for (const [s, d] of t) {
    if (!e.has(s))
      return !1;
    const a = e.get(s);
    if (JSON.stringify(a) !== JSON.stringify(d))
      return !1;
  }
  return !0;
}
const q = "powerbi-client-vue-js", V = k.version, o = i({
  name: "PowerBIBase",
  props: {
    // CSS class to be set on the embedding container (Optional)
    cssClassName: {
      type: String
    },
    // Provide a custom implementation of Power BI service (Optional)
    service: {
      type: f.Service
    }
  },
  data() {
    const t = this.service ? this.service : new f.Service(l.hpmFactory, l.wpmpFactory, l.routerFactory);
    return t.setSdkInfo(q, V), {
      powerbi: t,
      prevEventHandlerMap: /* @__PURE__ */ new Map([]),
      embed: void 0
    };
  },
  methods: {
    /**
     * Sets all event handlers from the input on the embedded entity
     *
     * @param embed Embedded object
     * @param eventHandlerMap Array of event handlers to be set on the embedded entity
     * @returns void
     */
    setEventHandlers(t, e) {
      if (M(this.prevEventHandlerMap, e))
        return;
      this.prevEventHandlerMap = e;
      let s = b.allowedEvents;
      const d = t.embedtype;
      switch (d) {
        case "create":
          break;
        case "report":
          s = [...s, ...w.allowedEvents];
          break;
        case "dashboard":
          s = [...s, ...g.allowedEvents];
          break;
        case "tile":
          s = [...s, ...v.allowedEvents];
          break;
        case "qna":
          s = [...s, ...u.allowedEvents];
          break;
        case "visual":
          s = [...s, ...p.allowedEvents];
          break;
        default:
          console.error(`Invalid embed type ${d}`);
      }
      const a = [];
      e.forEach((h, c) => {
        s.includes(c) ? (t.off(c), h && t.on(c, (m) => {
          h(m, t);
        })) : a.push(c);
      }), a.length && console.error(`Following events are invalid: ${a.join(",")}`);
    }
  }
}), L = i({
  name: "PowerBIReportEmbed",
  emits: ["report-obj"],
  props: {
    // Configuration for embedding the PowerBI Report (Required)
    embedConfig: {
      type: Object,
      required: !0
    },
    // Phased embedding flag (Optional)
    phasedEmbedding: {
      type: Boolean,
      default: !1
    },
    // Map of event name and handler methods pairs to be triggered on the event (Optional)
    eventHandlers: {
      type: Map
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "reportContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && (this.embedOrBootstrap(), this.callSetEventHandlers());
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.embedOrBootstrap(), this.callSetEventHandlers();
  },
  methods: {
    /**
     * Function to decide to embed, load or bootstrap
     *
     * @returns void
     */
    embedOrBootstrap() {
      var t, e;
      (t = this.config) != null && t.accessToken && ((e = this.config) != null && e.embedUrl) ? this.embedReport() : this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
    },
    /**
     * Embed or load the PowerBI Report based on phasedEmbedding flag
     *
     * @returns void
     */
    embedReport() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.phasedEmbedding ? this.powerbi.load(this.$refs.containerRef, this.config) : this.powerbi.embed(this.$refs.containerRef, this.config), this.$emit("report-obj", this.getReport());
    },
    /**
     * Set event handlers if available
     *
     * @returns void
     */
    callSetEventHandlers() {
      this.eventHandlers && this.embed && this.setEventHandlers(this.embed, this.eventHandlers);
    },
    // Returns embed object to calling function
    getReport() {
      return this.embed;
    }
  }
}), N = i({
  name: "PowerBIDashboardEmbed",
  props: {
    // Configuration for embedding the PowerBI Report (Required)
    embedConfig: {
      type: Object,
      required: !0
    },
    // Map of event name and handler methods pairs to be triggered on the event (Optional)
    eventHandlers: {
      type: Map
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "dashboardContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && (this.embedOrBootstrap(), this.callSetEventHandlers());
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.embedOrBootstrap(), this.callSetEventHandlers();
  },
  methods: {
    /**
     * Function to decide to embed or bootstrap
     *
     * @returns void
     */
    embedOrBootstrap() {
      var t, e;
      (t = this.config) != null && t.accessToken && ((e = this.config) != null && e.embedUrl) ? this.embedDashboard() : this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
    },
    /**
     * Embed the PowerBI Dashboard
     *
     * @returns void
     */
    embedDashboard() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    },
    /**
     * Set event handlers if available
     *
     * @returns void
     */
    callSetEventHandlers() {
      this.eventHandlers && this.embed && this.setEventHandlers(this.embed, this.eventHandlers);
    },
    // Returns embed object to calling function
    getDashboard() {
      return this.embed;
    }
  }
}), Q = i({
  name: "PowerBITileEmbed",
  props: {
    // Configuration for embedding the PowerBI Report (Required)
    embedConfig: {
      type: Object,
      required: !0
    },
    // Map of event name and handler methods pairs to be triggered on the event (Optional)
    eventHandlers: {
      type: Map,
      required: !1
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "tileContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && (this.embedOrBootstrap(), this.callSetEventHandlers());
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.embedOrBootstrap(), this.callSetEventHandlers();
  },
  methods: {
    /**
     * Function to decide to embed or bootstrap
     *
     * @returns void
     */
    embedOrBootstrap() {
      var t, e;
      (t = this.embedConfig) != null && t.accessToken && ((e = this.embedConfig) != null && e.embedUrl) ? this.embedTile() : this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.embedConfig);
    },
    /**
     * Embed the PowerBI Tile
     *
     * @returns void
     */
    embedTile() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.embedConfig);
    },
    /**
     * Set event handlers if available
     *
     * @returns void
     */
    callSetEventHandlers() {
      this.eventHandlers && this.embed && this.setEventHandlers(this.embed, this.eventHandlers);
    },
    // Returns embed object to calling function
    getTile() {
      return this.embed;
    }
  }
}), U = i({
  name: "PowerBIPaginatedReportEmbed",
  props: {
    // Configuration for embedding the PowerBI Paginated report (Required)
    embedConfig: {
      type: Object,
      required: !0
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "paginatedReportContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && this.embedPaginatedReport();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.embedPaginatedReport();
  },
  methods: {
    /**
     * Embed the PowerBI Paginated report
     *
     * @returns void
     */
    embedPaginatedReport() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    }
  }
}), F = i({
  name: "PowerBIVisualEmbed",
  props: {
    // Configuration for embedding the PowerBI Visual (Required)
    embedConfig: {
      type: Object,
      required: !0
    },
    // Map of event name and handler methods pairs to be triggered on the event (Optional)
    eventHandlers: {
      type: Map
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "visualContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && (this.embedOrBootstrap(), this.callSetEventHandlers());
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.embedOrBootstrap(), this.callSetEventHandlers();
  },
  methods: {
    /**
     * Function to decide to embed or bootstrap
     *
     * @returns void
     */
    embedOrBootstrap() {
      var t, e;
      (t = this.config) != null && t.accessToken && ((e = this.config) != null && e.embedUrl) ? this.embedVisual() : this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
    },
    /**
     * Embed the PowerBI Visual
     *
     * @returns void
     */
    embedVisual() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    },
    /**
     * Set event handlers if available
     *
     * @returns void
     */
    callSetEventHandlers() {
      this.eventHandlers && this.embed && this.setEventHandlers(this.embed, this.eventHandlers);
    },
    // Returns embed object to calling function
    getVisual() {
      return this.embed;
    }
  }
}), J = i({
  name: "PowerBIQnaEmbed",
  props: {
    // Configuration for embedding the PowerBI Qna visual (Required)
    embedConfig: {
      type: Object,
      required: !0
    },
    // Map of event name and handler methods pairs to be triggered on the event (Optional)
    eventHandlers: {
      type: Map
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "qnaContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && (this.embedOrBootstrap(), this.callSetEventHandlers());
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.embedOrBootstrap(), this.callSetEventHandlers();
  },
  methods: {
    /**
     * Function to decide to embed or bootstrap
     *
     * @returns void
     */
    embedOrBootstrap() {
      var t, e;
      (t = this.config) != null && t.accessToken && ((e = this.config) != null && e.embedUrl) ? this.embedQna() : this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
    },
    /**
     * Embed  the PowerBI Qna visual
     *
     * @returns void
     */
    embedQna() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    },
    /**
     * Set event handlers if available
     *
     * @returns void
     */
    callSetEventHandlers() {
      this.eventHandlers && this.embed && this.setEventHandlers(this.embed, this.eventHandlers);
    },
    // Returns embed object to calling function
    getQna() {
      return this.embed;
    }
  }
}), z = i({
  name: "PowerBICreateReport",
  props: {
    // Configuration for creating the PowerBI Report (Required)
    embedConfig: {
      type: Object,
      required: !0
    },
    eventHandlers: {
      type: Map
    }
  },
  mixins: [o],
  render() {
    return r("div", { ref: "containerRef", class: this.cssClassName, id: "createReportContainer" });
  },
  watch: {
    embedConfig: function(t, e) {
      e && (this.createEmbedReport(), this.callSetEventHandlers());
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return n(this.embedConfig);
    }
  },
  mounted() {
    this.$refs.containerRef && this.createEmbedReport(), this.callSetEventHandlers();
  },
  methods: {
    /**
     * Create the report
     *
     * @returns void
     */
    createEmbedReport() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.createReport(this.$refs.containerRef, this.config);
    },
    callSetEventHandlers() {
      this.eventHandlers && this.embed && this.setEventHandlers(this.embed, this.eventHandlers);
    },
    getCreateObj() {
      return this.embed;
    }
  }
});
export {
  z as PowerBICreateReport,
  N as PowerBIDashboardEmbed,
  U as PowerBIPaginatedReportEmbed,
  J as PowerBIQnaEmbed,
  L as PowerBIReportEmbed,
  Q as PowerBITileEmbed,
  F as PowerBIVisualEmbed
};

// SIG // Begin signature block
// SIG // MIIregYJKoZIhvcNAQcCoIIrazCCK2cCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 8VPxOqMpfMgcQaFbJNWvm+cZFU2p4omyFunFnDEUWGOg
// SIG // ghFuMIIIfjCCB2agAwIBAgITNgAAAd9zgZcWvjL9DQAC
// SIG // AAAB3zANBgkqhkiG9w0BAQsFADBBMRMwEQYKCZImiZPy
// SIG // LGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRUw
// SIG // EwYDVQQDEwxBTUUgQ1MgQ0EgMDEwHhcNMjQwMTIwMDEz
// SIG // MzQ0WhcNMjUwMTE5MDEzMzQ0WjAkMSIwIAYDVQQDExlN
// SIG // aWNyb3NvZnQgQXp1cmUgQ29kZSBTaWduMIIBIjANBgkq
// SIG // hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1bnAJpGyFqbK
// SIG // WMrMsnUMskYdi/KuYoGBXMtrw5PMRr1TEQYccGzrCSBH
// SIG // dMGPDe1lP8YJGDJ0rDOL5nNgePQxnawI0iam7MdM3/gy
// SIG // xY6wSE1HnHUYZatFShl/FG1TpINGiHxTS0bOA0qwmWId
// SIG // us8gfKpC/41Jgew4XARIYYDpV0UOCx51L+6n/ol6g7sB
// SIG // c/bVEwIfCRrIC0QStKErEX1AfhSRdislMc5nhVySohMp
// SIG // 7Fs+JKqDPdWoNWMNFPHdHvkYACotxbdXFwPt6ijOiNR9
// SIG // dXvzXSI4e6E4b6wbXxJ4MJcG0xdymTh3YSwRWdfFOL/F
// SIG // Xk5W+K/eN+OgmNvkip0GuwIDAQABo4IFijCCBYYwKQYJ
// SIG // KwYBBAGCNxUKBBwwGjAMBgorBgEEAYI3WwEBMAoGCCsG
// SIG // AQUFBwMDMD0GCSsGAQQBgjcVBwQwMC4GJisGAQQBgjcV
// SIG // CIaQ4w2E1bR4hPGLPoWb3RbOnRKBYIPdzWaGlIwyAgFk
// SIG // AgEOMIICdgYIKwYBBQUHAQEEggJoMIICZDBiBggrBgEF
// SIG // BQcwAoZWaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aWluZnJhL0NlcnRzL0JZMlBLSUNTQ0EwMS5BTUUuR0JM
// SIG // X0FNRSUyMENTJTIwQ0ElMjAwMSgyKS5jcnQwUgYIKwYB
// SIG // BQUHMAKGRmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JZ
// SIG // MlBLSUNTQ0EwMS5BTUUuR0JMX0FNRSUyMENTJTIwQ0El
// SIG // MjAwMSgyKS5jcnQwUgYIKwYBBQUHMAKGRmh0dHA6Ly9j
// SIG // cmwyLmFtZS5nYmwvYWlhL0JZMlBLSUNTQ0EwMS5BTUUu
// SIG // R0JMX0FNRSUyMENTJTIwQ0ElMjAwMSgyKS5jcnQwUgYI
// SIG // KwYBBQUHMAKGRmh0dHA6Ly9jcmwzLmFtZS5nYmwvYWlh
// SIG // L0JZMlBLSUNTQ0EwMS5BTUUuR0JMX0FNRSUyMENTJTIw
// SIG // Q0ElMjAwMSgyKS5jcnQwUgYIKwYBBQUHMAKGRmh0dHA6
// SIG // Ly9jcmw0LmFtZS5nYmwvYWlhL0JZMlBLSUNTQ0EwMS5B
// SIG // TUUuR0JMX0FNRSUyMENTJTIwQ0ElMjAwMSgyKS5jcnQw
// SIG // ga0GCCsGAQUFBzAChoGgbGRhcDovLy9DTj1BTUUlMjBD
// SIG // UyUyMENBJTIwMDEsQ049QUlBLENOPVB1YmxpYyUyMEtl
// SIG // eSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZp
// SIG // Z3VyYXRpb24sREM9QU1FLERDPUdCTD9jQUNlcnRpZmlj
// SIG // YXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlv
// SIG // bkF1dGhvcml0eTAdBgNVHQ4EFgQUju4tKpnu7Y7YxY8r
// SIG // iI5ZhjOnGwkwDgYDVR0PAQH/BAQDAgeAMEUGA1UdEQQ+
// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xFjAUBgNVBAUTDTIzNjE2Nys1MDE5NzAwggHm
// SIG // BgNVHR8EggHdMIIB2TCCAdWgggHRoIIBzYY/aHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9B
// SIG // TUUlMjBDUyUyMENBJTIwMDEoMikuY3JshjFodHRwOi8v
// SIG // Y3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBDUyUyMENBJTIw
// SIG // MDEoMikuY3JshjFodHRwOi8vY3JsMi5hbWUuZ2JsL2Ny
// SIG // bC9BTUUlMjBDUyUyMENBJTIwMDEoMikuY3JshjFodHRw
// SIG // Oi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBDUyUyMENB
// SIG // JTIwMDEoMikuY3JshjFodHRwOi8vY3JsNC5hbWUuZ2Js
// SIG // L2NybC9BTUUlMjBDUyUyMENBJTIwMDEoMikuY3JshoG9
// SIG // bGRhcDovLy9DTj1BTUUlMjBDUyUyMENBJTIwMDEoMiks
// SIG // Q049QlkyUEtJQ1NDQTAxLENOPUNEUCxDTj1QdWJsaWMl
// SIG // MjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1D
// SIG // b25maWd1cmF0aW9uLERDPUFNRSxEQz1HQkw/Y2VydGlm
// SIG // aWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29iamVjdENs
// SIG // YXNzPWNSTERpc3RyaWJ1dGlvblBvaW50MB8GA1UdIwQY
// SIG // MBaAFJZRhOBrb3v+2Aarw/KF5imuavnUMB8GA1UdJQQY
// SIG // MBYGCisGAQQBgjdbAQEGCCsGAQUFBwMDMA0GCSqGSIb3
// SIG // DQEBCwUAA4IBAQCXv2FzUgqF4rS3/1+aXyWaXqd3LI3a
// SIG // pgYIPvCq/vvFzI1sHZuLYi2rCTFDwoJqeTWJ98AuBnnx
// SIG // mMHxe15thTEkdoukFB44oBrugY3VkIeBMBmjaly5F5VD
// SIG // O1sNmdCq0baQi9egwjkzWbghTwMrUhxbJD1q6+qtxAbo
// SIG // jOj+VS4BUiogMXLp5XSaK26wa72UmYm9TiDcxRgELM1E
// SIG // dMraL1uhTqfrqFYYkAqpzoXgtaaZ2T7LO7516KIMjtMY
// SIG // EluNG0ZZbRn8J5TndyGf+N2To+V3nkoYOdks1RIsmK2Y
// SIG // w9ezEjc0DNSSiNO/prQAuw/nmf/oNqTP/daB3Kw6vTau
// SIG // EK0tMIII6DCCBtCgAwIBAgITHwAAAFHqj/accwyoOwAA
// SIG // AAAAUTANBgkqhkiG9w0BAQsFADA8MRMwEQYKCZImiZPy
// SIG // LGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRAw
// SIG // DgYDVQQDEwdhbWVyb290MB4XDTIxMDUyMTE4NDQxNFoX
// SIG // DTI2MDUyMTE4NTQxNFowQTETMBEGCgmSJomT8ixkARkW
// SIG // A0dCTDETMBEGCgmSJomT8ixkARkWA0FNRTEVMBMGA1UE
// SIG // AxMMQU1FIENTIENBIDAxMIIBIjANBgkqhkiG9w0BAQEF
// SIG // AAOCAQ8AMIIBCgKCAQEAyZpSCX0Bno1W1yqXMhT6BUlJ
// SIG // ZWpa4p3xFeiTHO4vm2Q6C/azR5xwxnyYHrkSGDtS2P9X
// SIG // +KDE64V20mmEQkubxnPNeOVnE2RvdPGxgwlq+BhS3ONd
// SIG // VsQPj79q7XgHM9HhzB9+qk0PC9KN1zm9p/seyiRS6JF1
// SIG // dbOqRf1pUl7FAVxmgiCFgV8hHIb/rDPXig7FDi3S0yEx
// SIG // 2CUDVpIq8jEhG8anUFE1WYxM+ni0S5KHwwKPKV4qyGDo
// SIG // DO+9AmDoma3Chyu5WDlW5cdtqXTWsGPE3umtnX6Amlld
// SIG // UFLms4OVR4guKf+n5LIBCC6bTiocfXPomqYjYTKx7AGM
// SIG // faVLaaXmhQIDAQABo4IE3DCCBNgwEgYJKwYBBAGCNxUB
// SIG // BAUCAwIAAjAjBgkrBgEEAYI3FQIEFgQUEmgkQiFHy9Rr
// SIG // vjHPIKTACyN/P0cwHQYDVR0OBBYEFJZRhOBrb3v+2Aar
// SIG // w/KF5imuavnUMIIBBAYDVR0lBIH8MIH5BgcrBgEFAgMF
// SIG // BggrBgEFBQcDAQYIKwYBBQUHAwIGCisGAQQBgjcUAgEG
// SIG // CSsGAQQBgjcVBgYKKwYBBAGCNwoDDAYJKwYBBAGCNxUG
// SIG // BggrBgEFBQcDCQYIKwYBBQUIAgIGCisGAQQBgjdAAQEG
// SIG // CysGAQQBgjcKAwQBBgorBgEEAYI3CgMEBgkrBgEEAYI3
// SIG // FQUGCisGAQQBgjcUAgIGCisGAQQBgjcUAgMGCCsGAQUF
// SIG // BwMDBgorBgEEAYI3WwEBBgorBgEEAYI3WwIBBgorBgEE
// SIG // AYI3WwMBBgorBgEEAYI3WwUBBgorBgEEAYI3WwQBBgor
// SIG // BgEEAYI3WwQCMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIA
// SIG // QwBBMAsGA1UdDwQEAwIBhjASBgNVHRMBAf8ECDAGAQH/
// SIG // AgEAMB8GA1UdIwQYMBaAFCleUV5krjS566ycDaeMdQHR
// SIG // CQsoMIIBaAYDVR0fBIIBXzCCAVswggFXoIIBU6CCAU+G
// SIG // MWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2lpbmZy
// SIG // YS9jcmwvYW1lcm9vdC5jcmyGI2h0dHA6Ly9jcmwyLmFt
// SIG // ZS5nYmwvY3JsL2FtZXJvb3QuY3JshiNodHRwOi8vY3Js
// SIG // My5hbWUuZ2JsL2NybC9hbWVyb290LmNybIYjaHR0cDov
// SIG // L2NybDEuYW1lLmdibC9jcmwvYW1lcm9vdC5jcmyGgaps
// SIG // ZGFwOi8vL0NOPWFtZXJvb3QsQ049QU1FUm9vdCxDTj1D
// SIG // RFAsQ049UHVibGljJTIwS2V5JTIwU2VydmljZXMsQ049
// SIG // U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1BTUUs
// SIG // REM9R0JMP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/
// SIG // YmFzZT9vYmplY3RDbGFzcz1jUkxEaXN0cmlidXRpb25Q
// SIG // b2ludDCCAasGCCsGAQUFBwEBBIIBnTCCAZkwRwYIKwYB
// SIG // BQUHMAKGO2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w
// SIG // a2lpbmZyYS9jZXJ0cy9BTUVSb290X2FtZXJvb3QuY3J0
// SIG // MDcGCCsGAQUFBzAChitodHRwOi8vY3JsMi5hbWUuZ2Js
// SIG // L2FpYS9BTUVSb290X2FtZXJvb3QuY3J0MDcGCCsGAQUF
// SIG // BzAChitodHRwOi8vY3JsMy5hbWUuZ2JsL2FpYS9BTUVS
// SIG // b290X2FtZXJvb3QuY3J0MDcGCCsGAQUFBzAChitodHRw
// SIG // Oi8vY3JsMS5hbWUuZ2JsL2FpYS9BTUVSb290X2FtZXJv
// SIG // b3QuY3J0MIGiBggrBgEFBQcwAoaBlWxkYXA6Ly8vQ049
// SIG // YW1lcm9vdCxDTj1BSUEsQ049UHVibGljJTIwS2V5JTIw
// SIG // U2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJh
// SIG // dGlvbixEQz1BTUUsREM9R0JMP2NBQ2VydGlmaWNhdGU/
// SIG // YmFzZT9vYmplY3RDbGFzcz1jZXJ0aWZpY2F0aW9uQXV0
// SIG // aG9yaXR5MA0GCSqGSIb3DQEBCwUAA4ICAQBQECO3Tw/o
// SIG // 317Rrd7yadqcswPx1LvIYymkaTN6KcmuRt6HKa0Xe73U
// SIG // x2/AQ30TfgA9GBJngweRykKBusRzyOU17iIubJvy3gA2
// SIG // 1dwtqtB0DsoEv1U/ptVu2v++doTCJ/i+GbssVXkgaX8H
// SIG // +6EOGEmT4evp4GbwR4HwWlc+Dvf8HH8PdUA2Z04CvcwI
// SIG // fckSipbNm84jxJ8XjmTFTWscldL9edj2NsY6iGnyJFIy
// SIG // ur2PS7VRYyV3p1VAJp91gj1jRQtWEyCB8P5g9nE3z8u0
// SIG // ANaU/hjwEQCrdGyravWgnf2JtG+bT26YAokbc8m+32zU
// SIG // tXRO+NK3tAjhOu2FdsG3qNrF4sc7y37R/C+7Pcb/cFfh
// SIG // ttqsirepZii4xStcjMODYuXzGm3IJs0b0owHG6oKd7ZO
// SIG // GvHpmmh9K8/DLriD/sq8bURD10qi/wuW8zM7IpLg1vcR
// SIG // 9dIK2mc0pj44pc6UX0XbttP/VEJgu3lT2eI9VjWtaKjx
// SIG // 38xE9woSMyekPRtzTwgfuysF9DkJisr+yA4po/FPxpbB
// SIG // w9c/hBf32DH/GFxteS2pmjgKIbMP8sDukmEq3lVvuWNJ
// SIG // sybrZwQvQpvaM49fv+JKpLK5YWYEfwksYRR9wU8Hh/ID
// SIG // 9hRCEkbUoQ2W7mMpsp2Nbp/kcn4ivfolUy3Q9Yf0scsQ
// SIG // 6WTLYpm+AoCUJTGCGWQwghlgAgEBMFgwQTETMBEGCgmS
// SIG // JomT8ixkARkWA0dCTDETMBEGCgmSJomT8ixkARkWA0FN
// SIG // RTEVMBMGA1UEAxMMQU1FIENTIENBIDAxAhM2AAAB33OB
// SIG // lxa+Mv0NAAIAAAHfMA0GCWCGSAFlAwQCAQUAoIGuMBkG
// SIG // CSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQB
// SIG // gjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJ
// SIG // BDEiBCCQTCzef9Nlj9ENuym8obcakq1XpI8hQ69408G1
// SIG // vB1T0jBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBpAGMA
// SIG // cgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBANQd4BLT5ka7
// SIG // lBXRxUzJ70rNpqf3miJELcgEFA08tneO0VTeFRtI2sxP
// SIG // 6FkYhJ+oOSYVdTsKBQ+wAxBKwkvGo2A/hqfxHsZUzO0G
// SIG // vGZ8Oz8zTZ6nw4zCqlbwLQs5RrfEt/5jqxocy9jKy8T7
// SIG // OrzZ1MyOTO2De15wFlvwcGT0sXX12Vxxkv9i4Inf4Kxt
// SIG // 5Sd2tw+JuKUaAbMVuXPzwkjEWCMaPRL/J/NuOQn+Nmw4
// SIG // XaPyf/3oqeonkheltw8WapbEZiA3ov9CDXZ4iRsjhm2v
// SIG // G6ogesn28g9fzi0K1fVEYq2pKlTWXEIE1DrGH8S6mNfC
// SIG // T1XJR5OXjZN/pGWen4rEEbmhghcsMIIXKAYKKwYBBAGC
// SIG // NwMDATGCFxgwghcUBgkqhkiG9w0BBwKgghcFMIIXAQIB
// SIG // AzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZIhvcNAQkQ
// SIG // AQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkKAwEwMTAN
// SIG // BglghkgBZQMEAgEFAAQgAE1ejHWz2opk4bNess2qv/r3
// SIG // r7qA3O6X49MxjRvBM0sCBmX8Zg/MPBgTMjAyNDAzMjUx
// SIG // NjA5MTYuMDk5WjAEgAIB9KCB2KSB1TCB0jELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IEly
// SIG // ZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQL
// SIG // Ex1UaGFsZXMgVFNTIEVTTjoyQUQ0LTRCOTItRkEwMTEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZaCCEXswggcnMIIFD6ADAgECAhMzAAAB3p5Inpaf
// SIG // KEQ9AAEAAAHeMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMTAxMjE5MDcx
// SIG // MloXDTI1MDExMDE5MDcxMlowgdIxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5k
// SIG // IE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhh
// SIG // bGVzIFRTUyBFU046MkFENC00QjkyLUZBMDExJTAjBgNV
// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Uw
// SIG // ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC0
// SIG // gfQchfVCA4QOsRazp4sP8bA5fLEovazgjl0kjuFTEI5z
// SIG // RgKOVR8dIoozBDB/S2NklCAZFUEtDJepEfk2oJFD22hK
// SIG // cI4UNZqa4UYCU/45Up4nONlQwKNHp+CSOsZ16AKFqCsk
// SIG // mPP0TiCnaaYYCOziW+Fx5NT97F9qTWd9iw2NZLXIStf4
// SIG // Vsj5W5WlwB0btBN8p78K0vP23KKwDTug47srMkvc1Jq/
// SIG // sNx9wBL0oLNkXri49qZAXH1tVDwhbnS3eyD2dkQuKHUH
// SIG // BD52Ndo8qWD50usmQLNKS6atCkRVMgdcesejlO97LnYh
// SIG // zjdephNJeiy0/TphqNEveAcYNzf92hOn1G51aHplXOxZ
// SIG // BS7pvCpGXG0O3Dh0gFhicXQr6OTrVLUXUqn/ORZJQlyC
// SIG // JIOLJu5zPU5LVFXztJKepMe5srIA9EK8cev+aGqp8Dk1
// SIG // izcyvgQotRu51A9abXrl70KfHxNSqU45xv9TiXnocCjT
// SIG // T4xrffFdAZqIGU3t0sQZDnjkMiwPvuR8oPy+vKXvg62a
// SIG // GT1yWhlP4gYhZi/rpfzot3fN8ywB5R0Jh/1RjQX0cD/o
// SIG // sb6ocpPxHm8Ll1SWPq08n20X7ofZ9AGjIYTccYOrRism
// SIG // UuBABIg8axfZgGRMvHvK3+nZSiF+Xd2kC6PXw3WtWUzs
// SIG // PlwHAL49vzdwy1RmZR5x5QIDAQABo4IBSTCCAUUwHQYD
// SIG // VR0OBBYEFGswJm8bHmmqYHccyvDrPp2j0BLIMB8GA1Ud
// SIG // IwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1Ud
// SIG // HwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUt
// SIG // U3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEF
// SIG // BQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cu
// SIG // bWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9z
// SIG // b2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSku
// SIG // Y3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYI
// SIG // KwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQDilMB7Fw2nBjr1CILORw4D7NC2dash
// SIG // 0ugusHypS2g9+rWX21rdcfhjIms0rsvhrMYlR85ITFvh
// SIG // aivIK7i0Fjf7Dgl/nxlIE/S09tXESKXGY+P2RSL8LZAX
// SIG // LAs9VxFLF2DkiVD4rWOxPG25XZpoWGdvafl0KSHLBv6v
// SIG // mI5KgVvZsNK7tTH8TE0LPTEw4g9vIAFRqzwNzcpIkgob
// SIG // 3aku1V/vy3BM/VG87aP8NvFgPBzgh6gU2w0R5oj+zCI/
// SIG // kkJiPVSGsmLCBkY73pZjWtDr21PQiUs/zXzBIH9jRzGV
// SIG // GFvCqlhIyIz3xyCsVpTTGIbln1kUh2QisiADQNGiS+LK
// SIG // B0Lc82djJzX42GPOdcB2IxoMFI/4ZS0YEDuUt9Gce/Bq
// SIG // gSn8paduWjlif6j4Qvg1zNoF2oyF25fo6RnFQDcLRRbo
// SIG // wiUXWW3h9UfkONRY4AYOJtzkxQxqLeQ0rlZEII5Lu6Tl
// SIG // T7ZXROOkJQ4P9loT6U0MVx+uLD9Rn5AMFLbeq62TPzws
// SIG // ERuoIq2Jp00Sy7InAYaGC4fhBBY1b4lwBk5OqZ7vI8f+
// SIG // Fj1rtI7M+8hc4PNvxTKgpPcCty78iwMgxzfhcWxwMbYM
// SIG // Gne6C0DzNFhhEXQdbpjwiImLEn/4+/RKh3aDcEGETlZv
// SIG // mV9dEV95+m0ZgJ7JHjYYtMJ1WnlaICzHRg/p6jCCB3Ew
// SIG // ggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUwDQYJ
// SIG // KoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // MjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmlj
// SIG // YXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIy
// SIG // NVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUAA4IC
// SIG // DwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3u
// SIG // nAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm95VT
// SIG // cVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNEt6aO
// SIG // RmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlh
// SIG // AnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S
// SIG // /rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5LFGc
// SIG // 6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1o
// SIG // O5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbni
// SIG // jYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpGdc3E
// SIG // XzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYr
// SIG // bqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M
// SIG // 269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1qGFph
// SIG // AXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSLW6Cm
// SIG // gyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr
// SIG // 9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXbGjfH
// SIG // CBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQIDAQAB
// SIG // o4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkr
// SIG // BgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4w
// SIG // HQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMFwG
// SIG // A1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYB
// SIG // BQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNVHSUE
// SIG // DDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvX
// SIG // zpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYB
// SIG // BQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0Nl
// SIG // ckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0BAQsF
// SIG // AAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwUtj5O
// SIG // R2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts
// SIG // 0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+iehp
// SIG // 4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhTdSRX
// SIG // ud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFd
// SIG // PSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZ
// SIG // QhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0DLzs
// SIG // kYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCr
// SIG // dTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5
// SIG // JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+kKNxn
// SIG // GSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdU
// SIG // CbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3
// SIG // Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokLjzba
// SIG // ukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTmdHRb
// SIG // atGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNT
// SIG // TY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLXMIICQAIB
// SIG // ATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // LTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh
// SIG // dGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRT
// SIG // UyBFU046MkFENC00QjkyLUZBMDExJTAjBgNVBAMTHE1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAH
// SIG // BgUrDgMCGgMVAGigUorMuMvOqZfF8ttgiWRMRNrzoIGD
// SIG // MIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // DQYJKoZIhvcNAQEFBQACBQDpq4DoMCIYDzIwMjQwMzI1
// SIG // MTI0OTQ0WhgPMjAyNDAzMjYxMjQ5NDRaMHcwPQYKKwYB
// SIG // BAGEWQoEATEvMC0wCgIFAOmrgOgCAQAwCgIBAAICCkYC
// SIG // Af8wBwIBAAICE6AwCgIFAOms0mgCAQAwNgYKKwYBBAGE
// SIG // WQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAweh
// SIG // IKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQCO
// SIG // nY5PemmZCtX5xARUAv8D7nZyxRQKMjsKJeoVsHysSXHB
// SIG // 0nHZtMoR3yrJCW0BkPnyKshjSmjKUoXBUw9voACrC9io
// SIG // GYgJFMHARKPgLTr0UFTRJYLchpPxUGEUTzaNsMP1XuQi
// SIG // RsIKpUKjLYLpCr67tOu7p+pTIfwVUGdR7uEJNTGCBA0w
// SIG // ggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwAhMzAAAB3p5InpafKEQ9AAEAAAHeMA0GCWCGSAFl
// SIG // AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcN
// SIG // AQkQAQQwLwYJKoZIhvcNAQkEMSIEIImipODmCidh18fw
// SIG // TqHN0SvxlBSIK7zVUZl6z9YPzx4rMIH6BgsqhkiG9w0B
// SIG // CRACLzGB6jCB5zCB5DCBvQQgjj4jnw3BXhAQSQJ/5gtz
// SIG // IK0+cP1Ns/NS2A+OB3N+HXswgZgwgYCkfjB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAd6eSJ6WnyhE
// SIG // PQABAAAB3jAiBCA+Znv90xduTLIoMcwMb3BqCvc7mWft
// SIG // qpqPhnWdzzOGNTANBgkqhkiG9w0BAQsFAASCAgALzk4J
// SIG // g53RssG/E3xZLGemUqnEKOKc+lAZ9X8mX0CbGmal9QXi
// SIG // Zh8NJATGSXvLp95xheZHkrPXSRzJOSTxab+Yr5mvgpXY
// SIG // jjBtplhWr1xZtXafG673lKvFTHlXNzP6z91YCbavA6e3
// SIG // 2J1tPl0H4DQj5f+TujQZ7nWGdhx90xu6a74/y1Na64PI
// SIG // /9Ez/6BMlkA0TIw9+zD51noyrTBVZBXK1i6jXb0vcWg1
// SIG // mjowvVE0xrbLtjAd2K72tsYtmkAf3fB0LA6I8rGlCbZs
// SIG // L+Ujqux50bsXfRCurdZzapJ3kZDjxdcm2OAzgXqGpzT4
// SIG // E3KZtWqP/rCIpRyNWZWxDco9yrsEyhJ7Hg197gVnf3Hf
// SIG // c4L5gF8rmVxAwIR3YomQRjjuk42kV/ZS/GfZlevbMcs6
// SIG // JSRRXy7ameCqOmN1p31YEnuCBPbnx203Vh2T2BT37U+R
// SIG // B9vZuNkJ1OX2d3cr1Vu6ybyaR7gxVJ+cHc13YdVuFIFU
// SIG // PTISuoflJf5ecosapd8stGXgwElC1k6qXDtL8A/MMosX
// SIG // BhUTOtCazJ4SatTJiO3kLtnnlY3s7ADqxhMGIbPNfZza
// SIG // AIC2/4FxTE4QRraJPLgF9yjC8VCuUJ2hZ8XajZpfpgIF
// SIG // 0zWn//ZPlqvj9wQe2egrNZO3CNDgNPPb6ySM5+b5p2Dh
// SIG // PYNWYhi/cMSU8b4nuw==
// SIG // End signature block
